/*
 *    BIRD Looking glass
 */

#log "/var/log/bird/bird.log" all;
#log stderr error;
#debug protocols all;

#########################
## Variable
#########################
router id 45.12.184.0;
define MYASN = 35085;

## Master Table
ipv4 table master4;
ipv6 table master6;

## Table empty for template (otherwise error on template)
ipv4 table ipv4_t_empty;
ipv6 table ipv6_t_empty;

## ROA table
roa4 table roa_r4;
roa6 table roa_r6;

#########################
## FILTERS
#########################
filter no_routes {
  reject;
}

filter bgp_in_v4 {
  if (bgp_path.len > 0) then {
    if (roa_check(roa_r4, net, bgp_path.last) = ROA_INVALID) then
    {
      print "Ignore invalid ROA ", net, " for ASN ", bgp_path.last;
      bgp_community.add((MYASN,30));
    }
    if (roa_check(roa_r4, net, bgp_path.last) = ROA_UNKNOWN) then
    {
      bgp_community.add((MYASN,20));
    }
    if (roa_check(roa_r4, net, bgp_path.last) = ROA_VALID) then
    {
      bgp_community.add((MYASN,10));
    }
  }
  accept;
}

filter bgp_in_v6 {
  if (bgp_path.len > 0) then {
    if (roa_check(roa_r6, net, bgp_path.last) = ROA_INVALID) then
    {
      print "Ignore invalid ROA ", net, " for ASN ", bgp_path.last;
      bgp_community.add((MYASN,30));
    }
    if (roa_check(roa_r6, net, bgp_path.last) = ROA_UNKNOWN) then
    {
      bgp_community.add((MYASN,20));
    }
    if (roa_check(roa_r6, net, bgp_path.last) = ROA_VALID) then
    {
      bgp_community.add((MYASN,10));
    }
  }
  accept;
}


#########################
## TEMPLATES
#########################
template bgp IPV4_PEER {
  local as MYASN;
  neighbor as MYASN;
  ipv4 {
    add paths rx;
    export filter no_routes;
    import filter bgp_in_v4;
  };
}

template bgp IPV6_PEER {
  local as MYASN;
  neighbor as MYASN;
  ipv6 {
    add paths rx;
    export filter no_routes;
    import filter bgp_in_v6;
  };
}


#########################
## DEVICE PROTOCOLS
#########################
protocol device { }
